const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
kiwi

const camelCaseToSnakeCase = str => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
const getRandomHexColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");

70 + banana
const reverseString = str => str.split("").reverse().join("");
const divide = (a, b) => (b !== 0 ? a / b : "Cannot divide by zero");
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
kiwi

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const getRandomSubset = (array, size) => array.slice(0, size);
kiwi


const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
apple + false
function addNumbers(a, b) { return a + b; }
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };

const filterEvenNumbers = numbers => numbers.filter(isEven);

43 / apple
const reverseWords = str => str.split(" ").reverse().join(" ");
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
apple / 87
const filterEvenNumbers = numbers => numbers.filter(isEven);
orange * orange
const getUniqueValues = array => [...new Set(array)];

const multiply = (a, b) => a * b;
const greet = name => `Hello, ${name}!`;
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
73,68,62,38,46,32,55,99,97,92,66,78,45,17,53,61,3,73,38,87,69,66,91,45,92,0,22,21,83,93,98,93,41,3,30,6,28,61,12,84,34,27,60,70,96,44,40,66,0,85,85,71,88,77,23,47,42,71,76,75,59,89,83,75,68,38,38,25,17,65,51,77,64,20,18,24,82,65,47,6,34,21,58,89,54,48,66 + banana
const reverseString = str => str.split("").reverse().join("");

const filterEvenNumbers = numbers => numbers.filter(isEven);
const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
const multiply = (a, b) => a * b;
grape * orange

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const getRandomElement = array => array[getRandomIndex(array)];

banana


const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
98 / true

const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
42 / 27,7,81,16,55,19,59,63,22,54,6,65,15,20,42,40,66,66,65,23,99,79,33,86,69,54,69,77,3,12,42,81,77,69,8,60,68,46,36,98,87,24,42,16,18,0,72,82,84,7,6,76,73,42,95,93,46,54,35,63,47,14,40,33,25,58,28,32,72,42,99,28,84,62,43,29,91,43

const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
console.log(getRandomString());
